plugins {
    id "org.javamodularity.moduleplugin" version '1.8.12'
    id 'java'
    id 'java-library'
    id 'idea'
    id "org.sonarqube" version '4.0.0.2929'
    id 'jacoco'

    id "application"
    id 'org.openjfx.javafxplugin' version '0.0.13'

    id 'org.springframework.boot' version '3.0.4'
    id 'io.spring.dependency-management' version '1.1.0'
    id "com.github.spotbugs" version '5.0.13'
}

spotbugs {
    reportLevel = 'high'
}

spotbugsMain {
    reports {
        html {
            stylesheet = 'fancy-hist.xsl'
        }
    }
}

sonar {
    properties {
        property "sonar.projectKey", "ak-git_DesktopFX"
        property "sonar.organization", "ak-git"
        property "sonar.host.url", "https://sonarcloud.io"
        property "sonar.login", "ec97b4884454351da027c6345043fc8ae9401d53"
        property "sonar.branch.name", "develop"
        property 'sonar.coverage.jacoco.xmlReportPaths', 'build/reports/jacoco/test/jacocoTestReport.xml'
    }
}

jacoco {
    toolVersion = "0.8.8"
}

ext {
    junit = 'org.junit:junit-bom:5.9.2'
    assertj = 'org.assertj:assertj-core:3.24.2'
    jsr305 = 'com.google.code.findbugs:jsr305:3.0.2'
    javax_inject = 'jakarta.inject:jakarta.inject-api:2.0.1.MR'
    uom_se = 'tec.uom:uom-se:1.0.10'
    javax_json = 'org.glassfish:javax.json:1.1.4'
    commons_math3 = 'org.apache.commons:commons-math3:3.6.1'
    commons_csv = 'org.apache.commons:commons-csv:1.9.0'
    jSerialComm = 'com.fazecast:jSerialComm:[2.9.1,3.0.0)'
    jenetics = 'io.jenetics:jenetics:7.1.1'
    javaVersion = JavaVersion.VERSION_19
}

wrapper {
    description 'Setup the Gradle wrapper'
    gradleVersion = "8.0.2"
    distributionUrl = "https://services.gradle.org/distributions/gradle-${gradleVersion}-all.zip"
}

allprojects {
    group = 'com.ak'
    version = '2023.03.04'
    apply plugin: 'idea'
    idea {
        module {
            inheritOutputDirs = true
        }
    }

    sourceSets {
        main.output.resourcesDir = main.java.classesDirectory
    }

    apply plugin: 'java'
    apply plugin: 'java-library'
    apply plugin: 'org.javamodularity.moduleplugin'
    apply plugin: 'jacoco'

    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion

    repositories {
        mavenCentral()
        mavenLocal()
        maven {
            url = 'https://plugins.gradle.org/m2/'
        }
    }

    jacocoTestReport {
        reports {
            xml.required = true
        }
    }

    dependencies {
        implementation jsr305
        testImplementation(platform(junit))
        testImplementation('org.junit.jupiter:junit-jupiter')
        testImplementation(assertj)
    }

    test {
        useJUnitPlatform()
        testLogging {
            events "started", "passed", "skipped", "failed"
        }
        forkEvery = 5
        maxHeapSize = '1G'
    }

    tasks.withType(JavaCompile).each {
        it.options.compilerArgs.add('--enable-preview')
    }
}

dependencies {
    implementation project(':FxCore')
    implementation project(':Communication')

    implementation javax_inject
    implementation uom_se
    implementation javax_json
    implementation 'org.springframework.boot:spring-boot-starter'
    testImplementation commons_csv

    annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"
}

javafx {
    version = '19.0.2'
    modules = ['javafx.controls', 'javafx.fxml']
}

configurations {
    configureEach {
        exclude group: 'jakarta.annotation', module: 'jakarta.annotation-api'
        exclude group: 'aopalliance', module: 'aopalliance'
    }
}

processResources {
    filesMatching("**/keys*.properties") {
        expand(project.properties)
    }
}

compileJava.inputs.files(processResources)

application {
    mainModule = 'com.ak.fx.desktop'
    mainClass = 'com.ak.fx.desktop.SpringFxApplication'
}