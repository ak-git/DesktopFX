package com.ak.hardware.tnmi.comm.interceptor;

import org.testng.Assert;
import org.testng.annotations.DataProvider;

public class TnmiTestProvider {
  private TnmiTestProvider() {
  }

  @DataProvider(name = "allOhmsMyoOff")
  public static Object[][] ohms() {
    byte[][] expected = {
        {0x7E, (byte) 0x81, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07},
        {0x7E, (byte) 0x81, 0x08, 0x08, 0x08, 0x08, 0x08, 0x00, 0x00, 0x00, 0x00, 0x27},
        {0x7E, (byte) 0x81, 0x08, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x67},
        {0x7E, (byte) 0x81, 0x08, 0x1C, 0x1C, 0x1C, 0x1C, 0x00, 0x00, 0x00, 0x00, 0x77},
        {0x7E, (byte) 0x81, 0x08, 0x1E, 0x1E, 0x1E, 0x1E, 0x00, 0x00, 0x00, 0x00, 0x7F},
        {0x7E, (byte) 0x81, 0x08, 0x1F, 0x1F, 0x1F, 0x1F, 0x00, 0x00, 0x00, 0x00, (byte) 0x83},
        {0x7E, (byte) 0x81, 0x08, 0x3F, 0x3F, 0x3F, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x03}
    };

    Assert.assertEquals(expected.length, TnmiRequest.Single.values().length);
    Object[][] values = new Object[expected.length][2];
    for (int i = 0; i < expected.length; i++) {
      values[i] = new Object[] {TnmiRequest.Single.values()[i].
          forAll(TnmiRequest.MyoType.OFF, TnmiRequest.MyoFrequency.OFF), expected[i]};
    }
    return values;
  }

  @DataProvider(name = "360OhmsMyoHz")
  public static Object[][] myo() {
    byte[][] expected = {
        {0x7E, (byte) 0x81, 0x08, 0x00, 0x00, 0x00, 0x00, (byte) 0x81, (byte) 0x81, (byte) 0x81, (byte) 0x81, 0x0B},
        {0x7E, (byte) 0x81, 0x08, 0x00, 0x00, 0x00, 0x00, (byte) 0x82, (byte) 0x82, (byte) 0x82, (byte) 0x82, 0x0F},
        {0x7E, (byte) 0x81, 0x08, 0x00, 0x00, 0x00, 0x00, (byte) 0x84, (byte) 0x84, (byte) 0x84, (byte) 0x84, 0x17},
        {0x7E, (byte) 0x81, 0x08, 0x00, 0x00, 0x00, 0x00, (byte) 0x88, (byte) 0x88, (byte) 0x88, (byte) 0x88, 0x27},
        {0x7E, (byte) 0x81, 0x08, 0x00, 0x00, 0x00, 0x00, (byte) 0x90, (byte) 0x90, (byte) 0x90, (byte) 0x90, 0x47}
    };

    TnmiRequest.MyoFrequency[] frequencies = {TnmiRequest.MyoFrequency.HZ_50, TnmiRequest.MyoFrequency.HZ_100,
        TnmiRequest.MyoFrequency.HZ_200, TnmiRequest.MyoFrequency.HZ_500, TnmiRequest.MyoFrequency.HZ_1000};
    Assert.assertEquals(expected.length, frequencies.length);

    Object[][] values = new Object[expected.length][2];
    for (int i = 0; i < expected.length; i++) {
      values[i] = new Object[] {TnmiRequest.Single.Z_360.forAll(TnmiRequest.MyoType.MV1, frequencies[i]), expected[i]};
    }
    return values;
  }

  @DataProvider(name = "sequence")
  public static Object[][] sequence() {
    byte[][] expected = {
        {0x7E, (byte) 0x82, 0x08, 0x01, 0x00, 0x00, 0x00, (byte) 0x84, (byte) 0x84, (byte) 0x84, (byte) 0x84, 0x19},
        {0x7E, (byte) 0x82, 0x08, 0x02, 0x00, 0x00, 0x00, (byte) 0x84, (byte) 0x84, (byte) 0x84, (byte) 0x84, 0x1A},
        {0x7E, (byte) 0x82, 0x08, 0x03, 0x00, 0x00, 0x00, (byte) 0x84, (byte) 0x84, (byte) 0x84, (byte) 0x84, 0x1B},
        {0x7E, (byte) 0x82, 0x08, 0x04, 0x00, 0x00, 0x00, (byte) 0x84, (byte) 0x84, (byte) 0x84, (byte) 0x84, 0x1C},
        {0x7E, (byte) 0x82, 0x08, 0x05, 0x00, 0x00, 0x00, 0x60, 0x60, 0x60, 0x60, (byte) 0x8D},
        {0x7E, (byte) 0x82, 0x08, 0x06, 0x00, 0x00, 0x00, 0x60, 0x60, 0x60, 0x60, (byte) 0x8E},
        {0x7E, (byte) 0x82, 0x08, 0x07, 0x00, 0x00, 0x00, 0x60, 0x60, 0x60, 0x60, (byte) 0x8F},
        {0x7E, (byte) 0x82, 0x08, 0x08, 0x00, 0x00, 0x00, 0x60, 0x60, 0x60, 0x60, (byte) 0x90}
    };

    Assert.assertEquals(expected.length, TnmiRequest.Sequence.values().length);
    Object[][] values = new Object[expected.length][2];
    for (int i = 0; i < expected.length; i++) {
      values[i] = new Object[] {TnmiRequest.Sequence.values()[i].build(), expected[i]};
    }
    return values;
  }
}
